{"0": {
    "doc": "Про курс",
    "title": "Про курс",
    "content": " ",
    "url": "http://localhost:4000/courses/pd/22sp/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "Про курс",
    "title": "Зміст",
    "content": ". | Особливостi | Система оцiнювання | Кодекс честi | Як успішно завершити курс? | . У рамках цього курсу ми будемо вивчати як програмувати паралельнi обчислювальнi системи та створювати програми, якi б володiли: . | Високою продуктивнiстю та енергоефективнiстю. | Функцiональнiстю та масштабованiстю. | . Навчальна мета . | З’ясувати основнi вiдмiнностi мiж латентними пристроями (ядра CPU) та пропускними пристроями (ядра GPU). | Зрозумiти, чому найкращi програми-переможцi все частiше використовують пристрої обох типiв. | . Потрiбнi навички . | Базовi знання C/C++ та Python: типи даних, цикли, умови, функцiї та манiпуляцiї з масивом. | Обiзнанiсть з NumPy, включаючи використання ndarrays та ufuncs. | Знання англiйської: можливiсть зрозумiти основний змiст поставленого завдання. | . Підручники . | David Kirk and Wen-mei W. Hwu (2017). Programming massively parallel processors: a hands-on approach, 3rd Edition. | . | Robert (Bob) Robey and Yuliana (Yulie) Zamora (2021). Parallel and High Performance Computing. | . ",
    "url": "http://localhost:4000/courses/pd/22sp/about/#%D0%B7%D0%BC%D1%96%D1%81%D1%82",
    "relUrl": "/about/#зміст"
  },"2": {
    "doc": "Про курс",
    "title": "Особливостi",
    "content": ". | Для магiстрiв 1-го курсу | Мова викладання: українська, англiйська | 12 лекцій | 4 практичнi роботи + семінар | Технології графічного процесінгу: екзамен | Технології розподілених обчислень: залік | . ",
    "url": "http://localhost:4000/courses/pd/22sp/about/#%D0%BE%D1%81%D0%BE%D0%B1%D0%BB%D0%B8%D0%B2%D0%BE%D1%81%D1%82i",
    "relUrl": "/about/#особливостi"
  },"3": {
    "doc": "Про курс",
    "title": "Система оцiнювання",
    "content": ". | 40% – Практичнi завдання (10% кожне) | 20% – Семінар | 40% – Екзамен/залік | . Важливо! Умова допуску до семестрового контролю (екзамену/заліку): Практичнi завдання + Семінар ≥ 36% . Шкала оцiнок КПI iм. Iгоря Сiкорського: . | A = 95–100 | Вiдмiнно | . | B = 85–94 | Дуже добре | . | C = 75–84 | Добре | . | D = 65–74 | Задовiльно | . | E = 60–64 | Достатньо | . | F &lt; 60 | Незадовiльно | . | Fx &lt; 36 | Недопущено | . | Порушення кодексу честi | Усунено | . ",
    "url": "http://localhost:4000/courses/pd/22sp/about/#%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0-%D0%BE%D1%86i%D0%BD%D1%8E%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F",
    "relUrl": "/about/#система-оцiнювання"
  },"4": {
    "doc": "Про курс",
    "title": "Кодекс честi",
    "content": "Ви можете обговорювати завдання практичних робiт у групах. Однак, кожен студент/студентка повинен/повинна пiдготувати розв’язки завдань самостiйно. Пiд час проходження цього курсу Ви зобов’язанi дотримуватись Кодекс честi КПI iм. Iгоря Сiкорського та усi наступнi правила: . | Кожен з Вас повинен вiдправляти на перевiрку власно виконану роботу. Використання чужих розв’язкiв або програмного коду i представлення їх за свої напрацювання є плагiатом та серйозним порушенням основних академiчних стандартiв. | Ви не повиннi дiлитися своїми розв’язками з iншими студентами, а також просити iнших дiлитися своїми розв’язками з Вами. | Якщо Ви отримували допомогу у вирiшеннi певного завдання, Ви повиннi зазначити це у звiтi, а саме: вiд кого та яку допомогу отримали.офлайн навчання, тому Вам необхідно робити перерви, ходити на прогулянки, спати рекомендовану кількість годин та їсти здорову їжу для підтримання свого організму. | . ",
    "url": "http://localhost:4000/courses/pd/22sp/about/#%D0%BA%D0%BE%D0%B4%D0%B5%D0%BA%D1%81-%D1%87%D0%B5%D1%81%D1%82i",
    "relUrl": "/about/#кодекс-честi"
  },"5": {
    "doc": "Про курс",
    "title": "Як успішно завершити курс?",
    "content": "Викладач зацікавлений у тому, щоб усі досягли успіху під час проходження цього курсу та дізналися якомога більше не лише про “зміст курсу”, а й про те, як ми можемо допомогти світу навколо нас. Далі наведено кілька концепцій метанавчання1, які підкреслюють важливість розважливої практики2, кооперативного навчання3 та атомних звичок4. Визначте пріоритети Використовуйте свій час та енергію так, щоб могли досягти поставлених цілей у навчанні, роботі та власному житті. Працюйте систематично Подібно до спортивних тренувань, навчання вимагає систематичності та регулярності для того, щоб досягти реального прогресу. Спілкуйтеся з однодумцями Знайдіть друга з яким зможете обговорювати матеріали лекцій і не тільки. Слідкуйте за людьми, трудовою етикою яких Ви захоплюєтесь – успішні люди надихаю тих, хто поруч. Залишайтесь духовно та фізично здоровими Навчаючись онлайн, швидше за все, Ви проводите більше часу за комп’ютером, ніж це було під час офлайн навчання, тому Вам необхідно робити перерви, ходити на прогулянки, спати рекомендовану кількість годин та їсти здорову їжу для підтримання свого організму. | Метанавчання – напрямок метапізнання, який означає те, як навчитися вчитись. &#8617; . | Розважлива практика передбачає докладання постійних зусиль для підвищення власної продуктивності. &#8617; . | Кооперативне навчання – спосіб навчання малих груп студентів під час якого усі працють разом над вивченням поставленої проблеми. Студенти максимізують навчання один одного та можуть досягти успіхів у навчанні як група вцілому за рахунок ефективної взаємодії між собою. &#8617; . | Атомні звички – невеликі та легкі у виконанні манери і навики, що працюють на вас, а не проти вас. &#8617; . | . ",
    "url": "http://localhost:4000/courses/pd/22sp/about/#%D1%8F%D0%BA-%D1%83%D1%81%D0%BF%D1%96%D1%88%D0%BD%D0%BE-%D0%B7%D0%B0%D0%B2%D0%B5%D1%80%D1%88%D0%B8%D1%82%D0%B8-%D0%BA%D1%83%D1%80%D1%81",
    "relUrl": "/about/#як-успішно-завершити-курс"
  },"6": {
    "doc": "ОТ",
    "title": "Технології графічного процесінгу &amp; розподілених обчислень",
    "content": "КПІ ім. Ігоря Сікорського - Весна, 2022 . Юрій Кочура лекції/практики . iuriy.kochura@gmail.com . Кафедра обчислювальної техніки . Лекції: середа та четвер о 12:20, онлайн . BBB Link . У рамках цього курсу ми будемо вивчати як програмувати паралельнi обчислювальнi системи та створювати програми, якi б володiли: . | Високою продуктивнiстю та енергоефективнiстю. | Функцiональнiстю та масштабованiстю. | . Навчальна мета . | З’ясувати основнi вiдмiнностi мiж латентними пристроями (ядра CPU) та пропускними пристроями (ядра GPU). | Зрозумiти, чому найкращi програми-переможцi все частiше використовують пристрої обох типiв. | . Більше.. ",
    "url": "http://localhost:4000/courses/pd/22sp/#%D1%82%D0%B5%D1%85%D0%BD%D0%BE%D0%BB%D0%BE%D0%B3%D1%96%D1%97-%D0%B3%D1%80%D0%B0%D1%84%D1%96%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%96%D0%BD%D0%B3%D1%83--%D1%80%D0%BE%D0%B7%D0%BF%D0%BE%D0%B4%D1%96%D0%BB%D0%B5%D0%BD%D0%B8%D1%85-%D0%BE%D0%B1%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D1%8C",
    "relUrl": "/#технології-графічного-процесінгу--розподілених-обчислень"
  },"7": {
    "doc": "ОТ",
    "title": "Вступ",
    "content": "09 лют Лекція 1 Знайомство 👋 [HML][PDF] Лекція 1Objects . ",
    "url": "http://localhost:4000/courses/pd/22sp/#%D0%B2%D1%81%D1%82%D1%83%D0%BF",
    "relUrl": "/#вступ"
  },"8": {
    "doc": "ОТ",
    "title": "Вступ до CUDA C",
    "content": "16 лют Лекція 2 Знайомство 👋 [HML][PDF] Лекція 2Objects . ",
    "url": "http://localhost:4000/courses/pd/22sp/#%D0%B2%D1%81%D1%82%D1%83%D0%BF-%D0%B4%D0%BE-cuda-c",
    "relUrl": "/#вступ-до-cuda-c"
  },"9": {
    "doc": "ОТ",
    "title": "ОТ",
    "content": " ",
    "url": "http://localhost:4000/courses/pd/22sp/",
    "relUrl": "/"
  },"10": {
    "doc": "Семінар",
    "title": "Деталі будуть повідомлені трохи пізніше",
    "content": " ",
    "url": "http://localhost:4000/courses/pd/22sp/seminar/#%D0%B4%D0%B5%D1%82%D0%B0%D0%BB%D1%96-%D0%B1%D1%83%D0%B4%D1%83%D1%82%D1%8C-%D0%BF%D0%BE%D0%B2%D1%96%D0%B4%D0%BE%D0%BC%D0%BB%D0%B5%D0%BD%D1%96-%D1%82%D1%80%D0%BE%D1%85%D0%B8-%D0%BF%D1%96%D0%B7%D0%BD%D1%96%D1%88%D0%B5",
    "relUrl": "/seminar/#деталі-будуть-повідомлені-трохи-пізніше"
  },"11": {
    "doc": "Семінар",
    "title": "Зміст",
    "content": ". ",
    "url": "http://localhost:4000/courses/pd/22sp/seminar/#%D0%B7%D0%BC%D1%96%D1%81%D1%82",
    "relUrl": "/seminar/#зміст"
  },"12": {
    "doc": "Семінар",
    "title": "Семінар",
    "content": " ",
    "url": "http://localhost:4000/courses/pd/22sp/seminar/",
    "relUrl": "/seminar/"
  },"13": {
    "doc": "Викладацький склад",
    "title": "Викладацький склад",
    "content": " ",
    "url": "http://localhost:4000/courses/pd/22sp/staff/",
    "relUrl": "/staff/"
  },"14": {
    "doc": "Викладацький склад",
    "title": "Інструктор",
    "content": "Юрій Кочура лекції/практики . iuriy.kochura@gmail.com . Кафедра обчислювальної техніки . Лекції: середа та четвер о 12:20, онлайн . BBB Link . ",
    "url": "http://localhost:4000/courses/pd/22sp/staff/#%D1%96%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D0%BE%D1%80",
    "relUrl": "/staff/#інструктор"
  },"15": {
    "doc": "Викладацький склад",
    "title": "Асистенти",
    "content": "Noname Noname . noname@comsys.kpi.ua . Якщо Ви бажаєте долучитись до процесу вдосконалення навчальних матеріалів, будь ласка, повідомте про це викладача. Ця активність дозволить Вам не лише глибше опанувати матеріл, а й отримати за Вашу активність бонуси у вигляді додаткових балів до загального рейтингу. ",
    "url": "http://localhost:4000/courses/pd/22sp/staff/#%D0%B0%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BD%D1%82%D0%B8",
    "relUrl": "/staff/#асистенти"
  },"16": {
    "doc": "Вступ",
    "title": "Вступ",
    "content": "Ця сторінка потребує наповнення. ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/",
    "relUrl": "/intro/"
  },"17": {
    "doc": "Вступ",
    "title": "Вступ",
    "content": "09 лют Лекція 1 Знайомство 👋 [HML][PDF] Лекція 1Objects . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/",
    "relUrl": "/intro/"
  },"18": {
    "doc": "Comparable",
    "title": "Comparable",
    "content": " ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/comparable/",
    "relUrl": "/intro/comparable/"
  },"19": {
    "doc": "Comparable",
    "title": "Table of contents",
    "content": ". | Client vs implementer | Implementing comparison | Interfaces | Internal correctness | Encapsulation | . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/comparable/#table-of-contents",
    "relUrl": "/intro/comparable/#table-of-contents"
  },"20": {
    "doc": "Comparable",
    "title": "Client vs implementer",
    "content": "Any Java programmer can define their own data types by writing Java classes. Earlier, we implemented a Balance class that represented a currency amount in dollars and cents. We discussed two ways of implementing the Balance class. | Using two fields: dollars and cents. | Or using only one field: just totalCents. | . But computer programs, such as the Balance class, do not exist in isolation. They’re part of a larger ecosystem of programs that connect and communicate with each other to get things done. It turns out that this idea is a powerful example of abstraction: our Balance class defines public methods so that other programs written by anyone, anywhere, at anytime before or after it can rely on its functionality as long as they know how to interface with it. Let’s understand this by asking a question: How exactly does Java print out a $1.50 balance? . Balance balance = new Balance(1, 50); System.out.println(balance); . | System.out evaluates to an instance of Java’s PrintStream class that has a println method. | Control is transferred to the println method in order to print out the balance. | But in 1996, Sun (the original developers behind Java 1.0) could not have known exactly how we would define our Balance class. One field, two fields, or something completely different? | . Sun chose to resolve this design challenge by having the println method call the balance’s toString method. By including a toString public method in the Balance class, any program written by anyone, anywhere, at anytime can get a string representation of a balance. In this example, we consider Sun the client of our toString method. We (the programmer for the Balance class) are the implementer of the toString method. Client The requester of some method or service. Implementer The provider of some method or service. ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/comparable/#client-vs-implementer",
    "relUrl": "/intro/comparable/#client-vs-implementer"
  },"21": {
    "doc": "Comparable",
    "title": "Implementing comparison",
    "content": "In Autocomplete, we will implement the Term data type, which represents a possible autocompletion term. Similar to how the println method (client) depends on toString, the autocomplete algorithm (client) depends on functionality to compare any two autocompletion terms in the form of a compareTo public method. The compareTo method takes another instance of the same class and returns an int representing the comparison relationship between the current and other instance. | If this &lt; other, then this.compareTo(other) &lt; 0. | If this == other, then this.compareTo(other) == 0. | If this &gt; other, then this.compareTo(other) &gt; 0. | . For example, in the Balance class, we can define a compareTo method to compare the current balance’s value against another balance. (Rest of the class is omitted.) . public class Balance { private int totalCents; public int compareTo(Balance other) { return this.totalCents - other.totalCents; } } . This way, we define larger balances as “greater than” smaller balances. | If this.totalCents &lt; other.totalCents, then this.compareTo(other) &lt; 0. | If this.totalCents == other.totalCents, then this.compareTo(other) == 0. | If this.totalCents &gt; other.totalCents, then this.compareTo(other) &gt; 0. | . Sun anticipated programmers would need to write classes that implemented Comparable, so they provided helper methods for many commonly-used data types including int, double, and String. For objects such as String, we can be the client of the String class’s compareTo method by calling compareTo ourselves. However, we can’t call this.totalCents.compareTo(other.totalCents) directly since totalCents is an int primitive type, not an object. Instead, the Integer and Double classes provide a special static method compare that returns the compareTo result between two numbers, x and y. public class Balance { private int totalCents; public int compareTo(Balance other) { return Integer.compare(this.totalCents, other.totalCents); } } . Describe a change that would make smaller balances \"greater than\" larger balances. Negate the result before returning it, or subtract this.totalCents from other.totalCents. public int compareTo(Balance other) { return -Integer.compare(this.totalCents, other.totalCents); // return other.totalCents - this.totalCents; } . We prefer Integer.compare and Double.compare instead of subtracting numbers directly because of a subtlety when returning the difference of two double values as an int. Java truncuates double values when converting to int. For example, suppose we defined balances in double totalDollars rather than int totalCents. If we take a $1.75 balance and compare it with a $1.00 balance, the difference of $0.75 is truncated down to 0 so the two balances would be considered the same! . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/comparable/#implementing-comparison",
    "relUrl": "/intro/comparable/#implementing-comparison"
  },"22": {
    "doc": "Comparable",
    "title": "Interfaces",
    "content": "We’ve just implemented the compareTo method, but it turns out that this isn’t enough to implement a comparison relationship! One key difference between toString and compareTo is that every class contains a toString method (the default returns a gibberish string), but not every class necessarily contains a compareTo method. The goal of compiling a Java program is to guarantee that it can run. The Java compiler checks to make sure all of the programs in the ecosystem can work together, but it can’t maintain that guarantee across all data types since compareTo is not automatically provided until a programmer writes the method. To communicate the fact that we’ve written a valid and complete compareTo method, the class header must also implements Comparable&lt;...&gt; where ... is replaced with the same type. public class Balance implements Comparable&lt;Balance&gt; { private int totalCents; public int compareTo(Balance other) { return Integer.compare(this.totalCents, other.totalCents); } } . We read the class header as, “A public class Balance that can be compared against other instances of Balance.” The class is now comparable: it can be compared against other instances of the same type. Comparable The interface that requires a single method, compareTo. It accepts a generic type that represents the class of the other object to be compared against. ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/comparable/#interfaces",
    "relUrl": "/intro/comparable/#interfaces"
  },"23": {
    "doc": "Comparable",
    "title": "Internal correctness",
    "content": "A computer language is not just a way of getting a computer to perform operations but rather […] a novel formal medium for expressing ideas about methodology. Thus, programs must be written for people to read, and only incidentally for machines to execute.1 . In this course, we will primarily study two measures of correctness as it relates to code quality. External correctness A program where the desired outcome is correctly produced by a computer. However, external correctness is not the only criteria for determining the quality of a program. There are numerous ways a software project can fail: projects can be over budget, they can ship late, they can fail to be useful, or they can simply not be useful enough. Evidence clearly shows that success is highly contextual and stakeholder-dependent: success might be financial, social, physical and even emotional, suggesting that software engineering success is a multifaceted variable that cannot explained simply by user satisfaction, profitability or meeting requirements, budgets and schedules.2 . Whereas [external correctness criteria] are concerned with how software behaves technically according to specifications, some qualities concern properties of how developers interact with code:2 . | Verifiability is the effort required to verify that software does what it is intended to do. For example, it is hard to verify a safety critical system without either proving it correct or testing it in a safety-critical context (which isn’t safe). Take driverless cars, for example: for Google to test their software, they’ve had to set up thousands of paid drivers to monitor and report problems on the road. In contrast, verifying that a simple static HTML web page works correctly is as simple as opening it in a browser. | Maintainability is the effort required to correct, adapt, or perfect software. This depends mostly on how comprehensible and modular an implementation is. | Reusability is the effort required to use a program’s components for purposes other than those for which it was originally designed. APIs are reusable by definition, whereas black box embedded software (like the software built into a car’s traction systems) is not. | . Together, we call these criteria for how developers interact with code, “internal correctness.” . Internal correctness A program where the desired outcome is easily understood by other human programmers. Writing high-quality programs takes deliberate practice, so these guidelines are not meant to be memorized at first. Instead, we’ll learn how to write high-quality programs through a process called code review, the practice of reviewing code with an eye towards code quality. Documenting code . The goal of documenting code is to describe what happens without going into detail about how. For example, say we added a nextDay method to the CalendarDate class that returns a new CalendarDate for the following day. In order to work as expected, the implementation of the method might increment the month if the current day is already the last day of the month (which varies across different months). Or, it might increment the year if the current date is New Year’s Eve. But these implementation details aren’t relevant to the client of the CalendarDate class. We document code by adding inline code comments. Ideally, a client should only have to read the method comment (a line preceded by //) and the method signature (return type, name, parameters) to know how to use a method. public class CalendarDate { private int year; private int month; private int day; // Returns a new CalendarDate representing the next day, wrapping month or year as necessary. public CalendarDate nextDay() { ... } } . Every method needs a descriptive comment about its behavior without implementation details. Comments should describe the behavior of a method (what it does) without its implementation (how it does it). If someone is really interested in seeing exactly how a method works, they can read the code. | Harold Abelson, Gerald Jay Sussman, Julie Sussman. 1984. “Preface to the First Edition.” Structure and Interpretation of Computer Programs. https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-7.html#%_chap_Temp_4 &#8617; . | Amy J. Ko. 2020. “Quality.” Cooperative Software Development. http://faculty.washington.edu/ajko/books/cooperative-software-development/#/quality &#8617; &#8617;2 . | . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/comparable/#internal-correctness",
    "relUrl": "/intro/comparable/#internal-correctness"
  },"24": {
    "doc": "Comparable",
    "title": "Encapsulation",
    "content": "One important design decision about the CalendarDate class is the use of private fields. By declaring fields private, they allow access and modification only by code defined inside the implementing class. This helps to ensure external correctness by preventing clients from unexpectedly modifying important values. public class CalendarDate { private int year; private int month; private int day; } . public class Calendar { public static void main(String[] args) { CalendarDate welcome = new CalendarDate(2020, 9, 30); // private access prevents the following line of code from compiling welcome.day = 31; } } . In programming, this idea of preventing unexpected changes to the fields of an object is encapsulation. However, the private keyword prevents both access and modification, so it prevents clients from accessing (reading) the value of the current day. Getters and setters . To selectively allow access to fields, implementers can add getter methods that return copies of fields. public class CalendarDate { private int year; private int month; private int day; public int year() { return year; } public int month() { return month; } public int day() { return day; } } . This allows clients to access the current day without allowing unintended modification. CalendarDate welcome = new CalendarDate(2020, 9, 30); int wednesday = welcome.day(); wednesday = 31; . Why doesn't reassigning wednesday change the welcome object? int wednesday is a local variable assigned a copy of the number representing the welcome day. Changes to the local variable won’t affect the encapsulated welcome object. To selectively allow modification of fields, implementers can add setter methods. public class CalendarDate { private int year; private int month; private int day; public void setYear(int year) { this.year = year; } } . Since getters and setters are methods, they can include extra code to validate and check any of the given parameters. public class CalendarDate { private int year; private int month; private int day; public void setDate(int year, int month, int day) { // Check that the date is valid! validateDate(year, month, day); this.year = year; this.month = month; this.day = day; } } . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/comparable/#encapsulation",
    "relUrl": "/intro/comparable/#encapsulation"
  },"25": {
    "doc": "Загальна інформація",
    "title": "Загальна інформація",
    "content": " ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/welcome/",
    "relUrl": "/intro/welcome/"
  },"26": {
    "doc": "Загальна інформація",
    "title": "Зміст",
    "content": ". | Огляд | Особливостi | Система оцiнювання | Кодекс честi | Як успішно завершити курс? | . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/welcome/#%D0%B7%D0%BC%D1%96%D1%81%D1%82",
    "relUrl": "/intro/welcome/#зміст"
  },"27": {
    "doc": "Загальна інформація",
    "title": "Огляд",
    "content": "У рамках цього курсу ми будемо вивчати як програмувати паралельнi обчислювальнi системи та створювати програми, якi б володiли: . | Високою продуктивнiстю та енергоефективнiстю. | Функцiональнiстю та масштабованiстю. | . Навчальна мета . | З’ясувати основнi вiдмiнностi мiж латентними пристроями (ядра CPU) та пропускними пристроями (ядра GPU). | Зрозумiти, чому найкращi програми-переможцi все частiше використовують пристрої обох типiв. | . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/welcome/#%D0%BE%D0%B3%D0%BB%D1%8F%D0%B4",
    "relUrl": "/intro/welcome/#огляд"
  },"28": {
    "doc": "Загальна інформація",
    "title": "Особливостi",
    "content": ". | Для магiстрiв 1-го курсу | Мова викладання: українська, англiйська | 12 лекцій | 4 практичнi роботи + семінар | Технології графічного процесінгу: екзамен | Технології розподілених обчислень: залік | . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/welcome/#%D0%BE%D1%81%D0%BE%D0%B1%D0%BB%D0%B8%D0%B2%D0%BE%D1%81%D1%82i",
    "relUrl": "/intro/welcome/#особливостi"
  },"29": {
    "doc": "Загальна інформація",
    "title": "Система оцiнювання",
    "content": ". | 40% – Практичнi завдання (10% кожне) | 20% – Семінар | 40% – Екзамен/залік | . Важливо! Умова допуску до семестрового контролю (екзамену/заліку): Практичнi завдання + Семінар ≥ 36% . Шкала оцiнок КПI iм. Iгоря Сiкорського: . | A = 95–100 | Вiдмiнно | . | B = 85–94 | Дуже добре | . | C = 75–84 | Добре | . | D = 65–74 | Задовiльно | . | E = 60–64 | Достатньо | . | F &lt; 60 | Незадовiльно | . | Fx &lt; 36 | Недопущено | . | Порушення кодексу честi | Усунено | . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/welcome/#%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0-%D0%BE%D1%86i%D0%BD%D1%8E%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F",
    "relUrl": "/intro/welcome/#система-оцiнювання"
  },"30": {
    "doc": "Загальна інформація",
    "title": "Кодекс честi",
    "content": "Ви можете обговорювати завдання практичних робiт у групах. Однак, кожен студент/студентка повинен/повинна пiдготувати розв’язки завдань самостiйно. Пiд час проходження цього курсу Ви зобов’язанi дотримуватись Кодекс честi КПI iм. Iгоря Сiкорського та усi наступнi правила: . | Кожен з Вас повинен вiдправляти на перевiрку власно виконану роботу. Використання чужих розв’язкiв або програмного коду i представлення їх за свої напрацювання є плагiатом та серйозним порушенням основних академiчних стандартiв. | Ви не повиннi дiлитися своїми розв’язками з iншими студентами, а також просити iнших дiлитися своїми розв’язками з Вами. | Якщо Ви отримували допомогу у вирiшеннi певного завдання, Ви повиннi зазначити це у звiтi, а саме: вiд кого та яку допомогу отримали.офлайн навчання, тому Вам необхідно робити перерви, ходити на прогулянки, спати рекомендовану кількість годин та їсти здорову їжу для підтримання свого організму. | . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/welcome/#%D0%BA%D0%BE%D0%B4%D0%B5%D0%BA%D1%81-%D1%87%D0%B5%D1%81%D1%82i",
    "relUrl": "/intro/welcome/#кодекс-честi"
  },"31": {
    "doc": "Загальна інформація",
    "title": "Як успішно завершити курс?",
    "content": "Викладач зацікавлений у тому, щоб усі досягли успіху під час проходження цього курсу та дізналися якомога більше не лише про “зміст курсу”, а й про те, як ми можемо допомогти світу навколо нас. Далі наведено кілька концепцій метанавчання1, які підкреслюють важливість розважливої практики2, кооперативного навчання3 та атомних звичок4. Визначте пріоритети Використовуйте свій час та енергію так, щоб могли досягти поставлених цілей у навчанні, роботі та власному житті. Працюйте систематично Подібно до спортивних тренувань, навчання вимагає систематичності та регулярності для того, щоб досягти реального прогресу. Спілкуйтеся з однодумцями Знайдіть друга з яким зможете обговорювати матеріали лекцій і не тільки. Слідкуйте за людьми, трудовою етикою яких Ви захоплюєтесь – успішні люди надихаю тих, хто поруч. Залишайтесь духовно та фізично здоровими Навчаючись онлайн, швидше за все, Ви проводите більше часу за комп’ютером, ніж це було під час офлайн навчання, тому Вам необхідно робити перерви, ходити на прогулянки, спати рекомендовану кількість годин та їсти здорову їжу для підтримання свого організму. | Метанавчання – напрямок метапізнання, який означає те, як навчитися вчитись. &#8617; . | Розважлива практика передбачає докладання постійних зусиль для підвищення власної продуктивності. &#8617; . | Кооперативне навчання – спосіб навчання малих груп студентів під час якого усі працють разом над вивченням поставленої проблеми. Студенти максимізують навчання один одного та можуть досягти успіхів у навчанні як група вцілому за рахунок ефективної взаємодії між собою. &#8617; . | Атомні звички – невеликі та легкі у виконанні манери і навики, що працюють на вас, а не проти вас. &#8617; . | . ",
    "url": "http://localhost:4000/courses/pd/22sp/intro/welcome/#%D1%8F%D0%BA-%D1%83%D1%81%D0%BF%D1%96%D1%88%D0%BD%D0%BE-%D0%B7%D0%B0%D0%B2%D0%B5%D1%80%D1%88%D0%B8%D1%82%D0%B8-%D0%BA%D1%83%D1%80%D1%81",
    "relUrl": "/intro/welcome/#як-успішно-завершити-курс"
  }
}
